---
title: "Amazon_Reviews"
author: "Caspar Hu"
date: "2/6/2021"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

```{r}
# Load the package required to read JSON files.
library(rjson)
library(reticulate)
use_python("/Users/Caspar/Library/r-miniconda/envs/r-reticulate/bin/python")
```
## Load data 
```{python}
#py_install("pandas")
import pandas as pd 
import gzip

def parse(path):
  g = gzip.open(path, 'rb')
  for l in g:
    yield eval(l)

def getDF(path):
  i = 0
  df = {}
  for d in parse(path):
    df[i] = d
    i += 1
  return pd.DataFrame.from_dict(df, orient='index')

tg_review = getDF('/Users/Caspar/Downloads/reviews_Toys_and_Games_5.json.gz')


tg_review
```
## Python format to R format
```{r}
library(reticulate)
df2 <- py$tg_review
```

```{r}
library(stringr)

tg_review_r <- df2[,c("reviewerName","helpful","reviewText","overall","summary","reviewTime")]
head(tg_review_r,10)
tg_review_r$reviewerName <- unlist(tg_review_r$reviewerName)

tg_review_r$reviewTime <- str_replace_all(tg_review_r$reviewTime,"([0-9]{2})\\s([0-9]{1,2}),\\s([0-9]{4})",
                                       "\\3-\\2-\\1")
tg_review_r$reviewTime <- str_replace_all(tg_review_r$reviewTime,"-([0-9])-", "-0\\1-")

                                          
tg_review_r$reviewTime  <- str_replace_all(tg_review_r$reviewTime,"([0-9]{4})-([0-9]{2})-([0-9]{2})",
                                       "\\1-\\3-\\2")
```

```{r}
sample(tg_review_r$reviewText,10)

str_count(tg_review_r$reviewText,"[L][E][G][O]|[Ll]ego")

lego_case <- str_subset(tg_review_r$reviewText,"[L][E][G][O]|[Ll]ego")

str_count(tg_review_r$reviewText,"[Bb]oard.?[Gg]ame[s]?")

board_game_case <- str_subset(tg_review_r$reviewText,"[Bb]oard.?[Gg]ame[s]?")
```

```{r}
matches<- str_detect(tg_review_r$reviewText,"[Bb]oard.?[Gg]ame[s]?")

board_game_df <- tg_review_r[which(matches),]
```

```{r}
matches_2 <- str_detect(board_game_df$summary,"[Cc]o.?[Oo]p")
board_game_df[which(matches_2),]
```

Text Cleaning
```{r}
library(stringr)
library(tidyr)

boardGames_review <- df2

boardGames_review$reviewText <- str_to_lower(boardGames_review$reviewText)

head(boardGames_review$reviewText)

```
### Stem text
```{r}
library(tm)

stem_bg <- tm::stemDocument(boardGames_review$reviewText)

documentsCorp <- tm::SimpleCorpus(VectorSource(stem_bg))

documentsDTM <- DocumentTermMatrix(documentsCorp)

inspect(documentsDTM)
```

### lemmatize text
```{r}
library(textstem)
boardGames_review$reviewText <- lemmatize_strings(boardGames_review$reviewText)
```

### sentiment analysis 

```{r}
library(sentimentr)

library(lexicon)

library(magrittr)

jocker_bg <- sentiment(get_sentences(boardGames_review$reviewText[1:200]), polarity_dt = lexicon::hash_sentiment_jockers)

jocker_bg_summary <- jocker_bg%>%
  group_by(element_id)%>%      
  summarize(meanSentiment =mean(sentiment))
```

```{r}
boardGames_review$element_id = 1:nrow(boardGames_review)

boardGames_review_sub200 <- left_join(boardGames_review[1:200,], jocker_bg_summary, by = "element_id")

boardGames_review_sub200 <- boardGames_review_sub200[order(-boardGames_review_sub200$meanSentiment),] 

head(boardGames_review_sub200$reviewText)
  
```
```{r}
tail(boardGames_review_sub200$reviewText)
```

