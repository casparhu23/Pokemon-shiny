html_nodes("table#curr_table.genTbl.closedTbl.historicalTbl")%>%
html_table()
read_html(bitLink2) %>%
html_nodes("table#curr_table.genTbl.closedTbl.historicalTbl")%>%
html_table()%>%
magrittr::extract2(1)
bitcoin  <- read_html(bitLink2) %>%
html_nodes("table#curr_table.genTbl.closedTbl.historicalTbl")%>%
html_table()%>%
magrittr::extract2(1)
View(bitcoin)
bitcoin  <- read_html(bitLink2) %>%
html_nodes("table#curr_table.genTbl.closedTbl.historicalTbl")%>%
html_table()%>%
magrittr::extract2(1)
dim(bitcoin)
mean(bitcoin$Price)
summary(bitcoin)
bitcoin <- sapply( bitcoin[,2:7], as.numeric )
bitcoin
bitcoin  <- read_html(bitLink2) %>%
html_nodes("table#curr_table.genTbl.closedTbl.historicalTbl")%>%
html_table()%>%
magrittr::extract2(1)
bitcoin <- sapply( bitcoin[,2:7], as.numeric)
bitcoin
bitcoin  <- read_html(bitLink2) %>%
html_nodes("table#curr_table.genTbl.closedTbl.historicalTbl")%>%
html_table()%>%
magrittr::extract2(1)
bitcoin%>%
mutate(Price=as.numeric(Price))
bitcoin%>%
mutate(Price=as.numeric(as.character(Price)))
library(dplyr)
bitcoin%>%
mutate(Price=as.numeric(as.character(Price)))
bitcoin%>%
mutate(Price=as.numeric(Price))
bitcoin%>%
mutate(Price = as.numeric(gsub(",", "", Price)))
bitcoin$Date <- strptime(as.character(bitcoin$Date), "%Y/%m/%d")
bitcoin
bitcoin  <- read_html(bitLink2) %>%
html_nodes("table#curr_table.genTbl.closedTbl.historicalTbl")%>%
html_table()%>%
magrittr::extract2(1)
strptime(bitcoin$Date, "%d/%m/%Y")
format(as.Date(bitcoin$Date), "%Y/%m/%d")
bitcoin$Date <-
as.Date(bitcoin$Date, "%m/%d/%Y")
bitcoin$Date <- as.Date(bitcoin$Date, "%m/%d/%Y")
bitcoin  <- read_html(bitLink2) %>%
html_nodes("table#curr_table.genTbl.closedTbl.historicalTbl")%>%
html_table()%>%
magrittr::extract2(1)
bitcoin%>%
mutate(Price = as.numeric(gsub(",", "", Price)))
as.Date(bitcoin$Date, "%m/%d/%Y")
library(flipTime)
??fliptime
require(devtools)
install_github("Displayr/flipTime")
library(flipTime)
AsDate(bitcoin$Date)
bitcoin$Date <- AsDate(bitcoin$Date)
bitcoin%>%
mutate(Price = as.numeric(gsub(",", "", Price)))
bitcoin <- bitcoin%>%
mutate(Price = as.numeric(gsub(",", "", Price)))
mean(bitcoin$Price)
sd(bitcoin$Price)
mean(bitcoin$Price)
sd(bitcoin$Price)
log_return = diff(log(bitcoin$Price))
head(log_return)
log_return
mean(log_return)*100 # as percentage
sd(log_return)*100
log_return = diff(log(bitcoin$Price))
log_return
head(log_return)
#log_return=log_return[-1]
mean(log_return)*100 # as percentage
sd(log_return)*100
# log return of log cvs adjusted
log_return = diff(log(CVS$CVS.Adjusted))
head(log_return)
log_return=log_return[-1]
mean(log_return)*100 # as percentage
sd(log_return)*100 # as percentage
CVS$CVS.Adjusted
bitcoin$Price
rownames(bitcoin) <- bitcoin$Date
log_return = diff(log(bitcoin$Price))
log_return
log_return = diff(log(bitcoin$Price))
head(log_return)
#log_return=log_return[-1]
mean(log_return)*100 # as percentage
sd(log_return)*100
log_return = diff(log(bitcoin$Price))
head(log_return)
#log_return=log_return[-1]
mean(log_return)*100 # as percentage
sd(log_return)*100
bitcoin$Price
View(CVS)
log_ret
log_return = log_return*100
log_return
t.test(log_return)
normalTest(log_return, method= 'jb')
##########Compare forecast accuracy
plot(ausbeer)
beer4 <- window(ausbeer, start=2006)
plot(beer3)
plot(beer3)
##########Compare forecast accuracy
plot(ausbeer)
beer3
beer3 <- window(ausbeer,start=1992, end=c(2005,4))
beer4 <- window(ausbeer, start=2006)
plot(beer3)
fc1 <- meanf(beer3, h=12) #average of past values
fc1
plot(ibmclose)
head(ibmclose,10)
#ibmclose
ibm1 <- window(ibmclose, end=300)   # train data start from 1:300 samples
ibm2 <- window(ibmclose, start=301) # test data start from 301:369 samples
h <- length(ibm2) # length of test data set
h
f1 <- meanf(ibm1, h=h) #average of past values method # h=h we use test data length to forecast
f2 <- rwf(ibm1, h=h) #naive method
f3 <- rwf(ibm1, drift=TRUE, h=h) #drift method
# if we just use f1 and test data set we will get results from training and test
accuracy(f1, # model
ibm2) # test data
accuracy(f2,ibm2)
accuracy(f3,ibm2)
# for convenience, we can use f1$mean to get test set stats for RMSE, MAPE and MAE find the lowest
accuracy(f1$mean, # model
ibm2) # test data
accuracy(f2$mean,ibm2)
accuracy(f3$mean,ibm2)
accuracy(f1$fitted,ibm1)
plot(f1)   # average past value
plot(f2)   # naive - the last point
plot(f3)   # drift method
lines(ibm2)
plot(f1)
plot(f2)   # naive - the last point
plot(f3)   # drift method
lines(ibm2)
###???
f3$residuals
length(f3$residuals)   # this is 300
f3
length(f3$residuals)
###???
f3$residuals
length(f3$residuals)   # this is 300
res <- residuals(f3) # get residulas from f3
length(res)
head(res)
sum(is.na(res))  #check to see if there is any other NAs
which(is.na(res))  #location of NAs
res = res[-1] #remove NA
plot(res)
Acf(res)  # we still see some of data are not in the range that'why it is not a white noise.
# Ideally, we need a white noise
hist(res, breaks="FD")
jarque.bera.test(res) #p-value is small -> not normal
res1 <- residuals(f1)
res1
Acf(res1)
jarque.bera.test(res1)
###???
f3$residuals
length(f3$residuals)   # this is 300
f3$residuals
f3
f3$residuals
f3$model
f3$fitted
f3$mean
f3$fitted-f3$mean
f3$fitted[-1]-f3$mean[-1]
f3$fitted-f3$mean
f3$residuals
###???
f3$residuals
f3$fitted
f3$mean
residuals(f3)
visitors_training=window(visitors, end=c(2003,4))
visitors_training
plot(ausbeer)
beer1 <- window(ausbeer, start=1995, end=2003.99)#We use data from 1995-2003 as training data
plot(beer1,xlab="Year",
ylab="megaliters",
main="Australian quarterly beer production")# set title
plot(meanf(beer1, h=20), plot.conf=FALSE) #Forecasts produced by Average of Past Values method
lines(naive(beer1, h=20)$mean, col="red") #Forecasts produced by Naive method
lines(snaive(beer1, h=20)$mean, col="green") #Forcasts produced by Seasonal naive method
lines(rwf(beer1, h=20, drift=TRUE)$mean, col="pink") #Forecasts produced by Drift method
lines(window(ausbeer,start=2004)) #Actual data, color is black
plot(meanf(beer1, h=20), plot.conf=FALSE) #Forecasts produced by Average of Past Values method
lines(naive(beer1, h=20)$mean, col="red") #Forecasts produced by Naive method
lines(snaive(beer1, h=20)$mean, col="green") #Forcasts produced by Seasonal naive method
lines(rwf(beer1, h=20, drift=TRUE)$mean, col="pink") #Forecasts produced by Drift method
lines(window(ausbeer,start=2004)) #Actual data, color is black
plot(beer1,xlab="Year",
ylab="megaliters",
main="Australian quarterly beer production")# set title
plot(meanf(beer1, h=20), plot.conf=FALSE) #Forecasts produced by Average of Past Values method
lines(naive(beer1, h=20)$mean, col="red") #Forecasts produced by Naive method
lines(snaive(beer1, h=20)$mean, col="green") #Forcasts produced by Seasonal naive method
lines(rwf(beer1, h=20, drift=TRUE)$mean, col="pink") #Forecasts produced by Drift method
lines(window(ausbeer,start=2004)) #Actual data, color is black
plot(meanf(beer1, h=20), plot.conf=TRUE) #Forecasts produced by Average of Past Values method
lines(naive(beer1, h=20)$mean, col="red") #Forecasts produced by Naive method
lines(snaive(beer1, h=20)$mean, col="green") #Forcasts produced by Seasonal naive method
lines(rwf(beer1, h=20, drift=TRUE)$mean, col="pink") #Forecasts produced by Drift method
lines(window(ausbeer,start=2004)) #Actual data, color is black
plot(ausair)
air <- window(ausair, end=2004) #use data from 1970-2004 as training data
fit1 <- ses(air, h=50)  #Simple Exponential Smoothing for 50-year forecasts
fit2 <- holt(air, h=50) #Holt's linear trend for 50-year forecasts
fit3 <- holt(air, damped=TRUE, h=50) #Holt's Damped Trend for 50-year forecasts
plot(fit1) #Simple Exponential Smoothing for 50-year forecasts
plot(fit2) #Holt's linear trend for 50-year forecasts
plot(fit3) #Holt's Damped Trend for 50-year forecasts
lines(fit1$mean, col="green", lwd=2)
plot(fit3) #Holt's Damped Trend for 50-year forecasts
lines(fit1$mean, col="green", lwd=2)
lines(fit2$mean, col="red", lwd=2)
lines(window(ausair, start=2005), lwd=2)
legend("topleft", lty=1, col=c("green","red","purple"),
legend=c("SES","Holt","Damped"))
plot(fit3) #Holt's Damped Trend for 50-year forecasts
lines(fit1$mean, col="green", lwd=2)
lines(fit2$mean, col="red", lwd=2)
lines(window(ausair, start=2005), lwd=2)
legend("topleft", lty=1, col=c("green","red","blue"),
legend=c("SES","Holt","Damped"))
accuracy(fit1, ausair)
accuracy(fit2, ausair)
accuracy(fit3, ausair)
plot(austourists)
vis <- window(austourists, end=2008) #training data
vis2 <- window(austourists, start=2009)# Test data
lines(vis, col="red", lwd=2)
lines(vis2, col="blue", lwd=2)
plot(austourists)
vis <- window(austourists, end=2008.9999) #training data # gap was not closed fully and it is okay
vis2 <- window(austourists, start=2009)# Test data
lines(vis, col="red", lwd=2)
lines(vis2, col="blue", lwd=2)
plot(austourists)
vis <- window(austourists, end=2008.99) #training data # gap was not closed fully and it is okay
vis2 <- window(austourists, start=2009)# Test data
lines(vis, col="red", lwd=2)
lines(vis2, col="blue", lwd=2)
plot(austourists)
vis <- window(austourists, end=2008.9999999) #training data # gap was not closed fully and it is okay
vis2 <- window(austourists, start=2009)# Test data
lines(vis, col="red", lwd=2)
lines(vis2, col="blue", lwd=2)
plot(austourists)
vis <- window(austourists, end=2008.999999) #training data # gap was not closed fully and it is okay
vis2 <- window(austourists, start=2009)# Test data
lines(vis, col="red", lwd=2)
lines(vis2, col="blue", lwd=2)
plot(austourists)
vis <- window(austourists, end=2008.99999) #training data # gap was not closed fully and it is okay
vis2 <- window(austourists, start=2009)# Test data
lines(vis, col="red", lwd=2)
lines(vis2, col="blue", lwd=2)
plot(austourists)
vis <- window(austourists, end=2008.999999) #training data # gap was not closed fully and it is okay
vis2 <- window(austourists, start=2009)# Test data
lines(vis, col="red", lwd=2)
lines(vis2, col="blue", lwd=2)
fit1 <- hw(vis) #additive Holt-Winters method
fit2 <- hw(vis, seasonal="multiplicative") #multiplicative Holt-Winters method
fit3 <- hw(vis, damped=TRUE) #additive Holt-Winter method with damped trend
fit4 <- hw(vis, seasonal="multiplicative", damped=TRUE) #multiplicative Holt-Winter method with damped trend
plot(fit1, ylim=c(20,60))
lines(fit2$mean, col=2, lwd=2)
lines(fit3$mean, col=3, lwd=2)
lines(fit4$mean, col=5, lwd=2)
lines(vis2, lwd=2)
plot(fit1, ylim=c(30,60), include=8) # blue #additive Holt-Winters method (for stable seasonal)
lines(fit2$mean, col=2, lwd=2) # red #multiplicative Holt-Winters method (for more fluctuated seasona)
lines(fit3$mean, col=3, lwd=2) # green #additive Holt-Winter method with damped trend
lines(fit4$mean, col=5, lwd=2) # cyan #multiplicative Holt-Winter method with damped trend
lines(vis2, lwd=2) # black
legend("bottomleft", lty=1, col=c("blue","red","green","cyan"),
legend=c("HW","HW-M","HW-Damped", "HW-M-Damped"))
accuracy(fit1, vis2) # first is forecast values, the second is real data
accuracy(fit2, vis2)
accuracy(fit3, vis2)
accuracy(fit4, vis2)
plot(fit2$model) #Decompose each component from fit2
plot(fit2) #Plot the forecast of multiplicative Holt-Winters
fit5=ets(vis)
fit5=ets(vis)
plot(forecast(fit5)) #Plot the forecast and compare to multiplicative Holt-Winters (HW)
plot(forecast(fit5)) #Plot the forecast and compare to multiplicative Holt-Winters (HW)
lines(fit2$mean, col=2, lwd=2) # red
lines(vis2, lwd=2) # black
accuracy(fit2, vis2) #multiplicative HW performs better
accuracy(forecast(fit5), vis2)
fc5=forecast(fit5)
accuracy(fc5$mean, # forcast value
vis2)
accuracy(fc5$fitted, # actual data
vis)
vis
fc5$fitted
vis
accuracy(fc5, # ETS
austourists)
accuracy(fc5, # ETS
vis2)
accuracy(fc5, # ETS
austourists)
accuracy(fc5, # ETS
vis2)
plot(dj)
fit <- ets(dj)
fcast1 <-forecast(fit, h=20)
summary(fit)
plot(fit)
plot(dj)
fit <- ets(dj)
fcast1 <-forecast(fit, h=20)
summary(fit)
plot(fit)
accuracy(fit)
plot(forecast(fit,level=c(50,80,95)))
plot(forecast(fit,fan =TRUE))
plot(dj)
fit <- ets(dj)
fit
plot(fit)
accuracy(fit)
plot(forecast(fit,level=c(50,80,95)))
plot(fcast1)
plot(austourists)
fit <- ets(austourists)
fcast1 <-forecast(fit, h=20)
summary(fit)
plot(fit)
plot(forecast(fit,level=c(50,80,95)))
plot(forecast(fit,fan =TRUE))
#Compare forecast accuracy
plot(ausbeer)
beer3 <- window(ausbeer,start=1992, end=c(2005,4))
beer4 <- window(ausbeer, start=2006)
plot(beer3)
#Try ETS
fit4<-ets(beer3) #ETS() model
summary(fit4)
summary(fit4)
fc4<-forecast(fit4,h=12)
plot(fc1,xlab="Year",ylab="megaliters",main="Forecasts for quarterly beer production") #average of past values
lines(fc2$mean, col="red")  #naive method
plot(fc1,xlab="Year",ylab="megaliters",main="Forecasts for quarterly beer production") #average of past values
lines(fc2$mean, col="red")  #naive method
lines(fc3$mean, col="green") #seasonal naive method
lines(fc4$mean,col="pink") #ETS(M,N,M) model
#Compare forecast accuracy
plot(ausbeer)
beer3 <- window(ausbeer,start=1992, end=c(2005,4))
beer4 <- window(ausbeer, start=2006)
plot(beer3)
fc1 <- meanf(beer3, h=12) #average of past values
fc2 <- naive(beer3, h=12) #naive method
fc3 <- snaive(beer3, h=12)#seasonal naive method
#Try ETS
fit4<-ets(beer3) #ETS() model
#fit5<-ets(beer3, model='AAA', damped=FALSE) #Try ETS(A,A,A) model
summary(fit4)
#summary(fit5)
fc4<-forecast(fit4,h=12) # ETS method values
#fc5<-forecast(fit5,h=12) #Try forecast ETS(A,A,A)
plot(fc1,xlab="Year",ylab="megaliters",main="Forecasts for quarterly beer production") #average of past values
lines(fc2$mean, col="red")  #naive method
lines(fc3$mean, col="green") #seasonal naive method
lines(fc4$mean,col="pink") #ETS(M,N,M) model
#lines(fc5$mean,col="purple") #Plot EST(A,A,A) out
lines(beer4)
legend("topleft", lty=1, col=c("green","red","blue","pink","black"),
legend=c("Seasonal naive","Naive","Average","ETS","Actual"))
plot(fc1,xlab="Year",ylab="megaliters",main="Forecasts for quarterly beer production") #average of past values
lines(fc2$mean, col="red")  #naive method
lines(fc3$mean, col="green") #seasonal naive method
lines(fc4$mean,col="pink") #ETS(M,N,M) model
#lines(fc5$mean,col="purple") #Plot EST(A,A,A) out
lines(beer4)
legend("topleft", lty=1, col=c("green","red","blue","pink","black"),
legend=c("Seasonal naive","Naive","Average","ETS","Actual"))
#Visually, ETS() model and seasonal naive method perform better.
#Let's look at forecast accuracy to see if we can find out which one is the best among the four.
accuracy(fc1, beer4)   # if we do accuracy(fc1$mean, beer4)
accuracy(fc2, beer4)
accuracy(fc3, beer4)
accuracy(fc4, beer4)
plot(ibmclose)
head(ibmclose,10)
ibm1 <- window(ibmclose, end=300)   # train data start from 1:300 samples
ibm2 <- window(ibmclose, start=301) # test data start from 301:369 samples
h <- length(ibm2) # length of test data set
h
f1 <- meanf(ibm1, h=h) #average of past values method # h=h we use test data length to forecast
f2 <- rwf(ibm1, h=h) #naive method
f3 <- rwf(ibm1, drift=TRUE, h=h) #drift method
accuracy(f1, # model
ibm2) # test data
accuracy(f2,ibm2)
accuracy(f3,ibm2)
accuracy(f1$mean, # model
ibm2) # test data
accuracy(f2$mean,ibm2)
accuracy(f3$mean,ibm2)
plot(f1)
plot(f2)   # naive - the last point
plot(f3)   # drift method
lines(ibm2)
plot(f3)   # drift method
lines(ibm2)
res <- residuals(f3) # get residulas from f3
length(res)
head(res)
sum(is.na(res))  #check to see if there is any other NAs
which(is.na(res))  #location of NAs
res = res[-1] #remove NA
plot(res)
Acf(res)  # we still see some of data are not in the range that'why it is not a white noise.
# Ideally, we need a white noise
hist(res, breaks="FD")
library(fpp)
plot(visitors)
tail(visitors)
visitors_training=window(visitors, end=c(2003,4))
visitors_test=window(visitors,start=c(2003,5))
fc1 <- hw(visitors_training,seasonal="mult")
plot(fc1)
# Multiplicative seasonality because of the increasing size of the fluctuations
# and increasing variation with the trend.
# Seasonality looks like it behaves proportionally, therefore multiplicatively.
fc2 <- hw(visitors_training,seasonal="mult",damped=TRUE)
fc3 <- hw(visitors_training,seasonal="additive")
fc4 <- hw(visitors_training,seasonal="additive",damped=TRUE)
plot(fc1)
lines(fc2$mean,col=2)
lines(fc3$mean,col=3)
lines(fc4$mean,col=4)
lines(visitors_test,col='black')
accuracy(fc1$mean,visitors_test)
accuracy(fc2$mean,visitors_test)
accuracy(fc3$mean,visitors_test)
accuracy(fc4$mean,visitors_test)
res3 <- residuals(fc3)
Acf(res3)
Box.test(res3, lag=24, fitdf=length(fc3$model$par))
# Some problems, but not too bad.
jarque.bera.test(res3)
res3 <- residuals(fc3)
Acf(res3)
Box.test(res3, lag=24, fitdf=length(fc3$model$par))
# Some problems, but not too bad.
jarque.bera.test(res3)
window(ausbeer, start=1995)
subset(ausbeer, start=length(ausbeer)-4*5) # extracts last 5 years of observations one year 4 quarters
(ausbeer
ausbeer
window(ausbeer, start=1995)
subset(ausbeer, start=length(ausbeer)-4*5)
??list.files
knitr::opts_chunk$set(echo = TRUE)
list.files(path="/Users/Caspar/Documents/Unstructured Anlaytics/wweCalls")
list
read_csv(paste0("/Users/Caspar/Documents/Unstructured Anlaytics/wweCalls",list))
library(readr)
read_csv(paste0("/Users/Caspar/Documents/Unstructured Anlaytics/wweCalls",list))
temp = list.files(path="/Users/Caspar/Documents/Unstructured Anlaytics/wweCalls",
pattern="*.csv")
myfiles = lapply(temp, read.delim)
temp
myfiles = lapply(temp, read_csv)
temp = list.files(path="/Users/Caspar/Documents/Unstructured Anlaytics/wweCalls",
pattern="*.csv")
myfiles = lapply(temp, read_csv)
temp = list.files(path="/Users/Caspar/Documents/Unstructured Anlaytics/",
pattern="*.csv")
myfiles = lapply(temp, read_csv)
temp
temp = list.files(path="/Users/Caspar/Documents/Unstructured Anlaytics/",
pattern="*.csv")
temp
temp = list.files(path="/Users/Caspar/Documents/Unstructured Anlaytics/wweCalls",
pattern="*.csv")
temp = list.files(path="/Users/Caspar/Documents/Unstructured Anlaytics/wweCalls/",
pattern="*.csv")
myfiles = lapply(temp, read_csv)
temp
myfiles = lapply(temp, read_delim)
for (i in 1:length(temp)) assign(temp[i], read.csv(temp[i]))
